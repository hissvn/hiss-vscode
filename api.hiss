
/**
 * Hiss API
 */

(defun input-choices (choices &optional prompt)
    (input-choice choices prompt t))

(defvar *hiss-vscode-commands* (dict))

(defmacro defcommand (name &rest body)
    `(dict-set! *hiss-vscode-commands* ',name (lambda () ,@body)))

(defun call-command ()
    (funcall (dict-get *hiss-vscode-commands* (input-choice (for (key _) *hiss-vscode-commands* key)))))

/**
 * Built-in commands
 */

(defcommand "Load current file as Hiss"
    (load (file-name)))

/**
 * General VSCode properties
 */

(defun start (object) (get-property object "start"))
(defun end (object) (get-property object "end"))

(defvar window (get-property vscode "window"))

(defun active-editor ()
    (get-property window "activeTextEditor"))

/**
 * Selection
 */

(defun selection->range (selection)
    (make-range (start selection) (end selection)))

/**
 * TextEditor
 */

(defun selection (&optional editor)
    (get-property (or editor (active-editor)) "selection"))

(defun document (&optional editor)
    (get-property (or editor (active-editor)) "document"))

(defun selected-text (&optional editor)
    (get-text (selection->range (selection editor)) editor))

/**
 * TextDocument
 */

(defun file-name (&optional doc)
    (get-property (or doc (document)) "fileName"))
		
(defun is-dirty (&optional doc)
    (get-property (or doc (document)) "isDirty"))

(defun line-count (&optional doc)
    (get-property (or doc (document)) "lineCount"))

// Argument order is flipped from a typical method structure because I imagine
// querying the active doc will be the most typical
(defun get-text (&optional range doc)
    (call-haxe (or doc (document)) "getText" [range]))
