
/**
 * Hiss API
 */

(defun input-choices (choices &optional prompt)
    (input-choice choices prompt t))

(defvar *hiss-vscode-commands* (dict))

(defmacro defcommand (name &rest body)
    `(dict-set! *hiss-vscode-commands* ',name (lambda () ,@body)))

(defun call-command ()
    (funcall (dict-get *hiss-vscode-commands* (input-choice (for (key _) *hiss-vscode-commands* key)))))

// Path functions should operate on the current filename by default
(defun dir-name (&optional file) (_dir-name (or file (file-name))))
(defun base-name (&optional file) (_base-name (or file (file-name))))

// Dir functions should operate on the current directory by default
(defun read-dir (&optional dir)
    (call-haxe fs "readdirSync" [(or dir (dir-name))]))

// (load) should always load relative to the current script path
(defmacro call-relative (func file)
    `(let (load-dir
                (dir-name (if (bound? *current-file-name*) *current-file-name* (file-name)))
            *current-file-name*
                (path-join load-dir ,file))
        (,func *current-file-name*)))
(defvar _load load)
(defun load (file)
    (call-relative _load file))
    
/**
 * Built-in commands
 */

(defcommand "Load current file as Hiss"
    (load (base-name (file-name))))

/**
 * Node Modules
 */

(defmacro require! (module)
    `(defvar ,module (require (symbol-name ',module))))

(require! child_process)

(defun spawn (command &rest args)
    (call-haxe child_process "spawn" [command args]))

(defun spawn-with-options (options command &rest args)
    (call-haxe child_process "spawn" [command args options]))

(defun spawn-sync (command &rest args)
    (call-haxe child_process "spawnSync" [command args]))

(defun spawn-sync-with-options (options command &rest args)
    (call-haxe child_process "spawnSync" [command args options]))

(defun exists (filename)
    (call-haxe fs "existsSync" [filename]))

/**
 * General VSCode object properties
 */

(defun start (object) (get-property object "start"))
(defun end (object) (get-property object "end"))

(defun then (promise on-fulfilled &optional on-rejected)
    (call-haxe promise "then" [on-fulfilled on-rejected]))

/**
 * Synchronous interop
 */
(defun call-sync (object method &rest args)
    (call/cc 
        (lambda (cc) 
            (then 
                (call-haxe object method args)
                cc))))

/**
 * vscode.window
 */
(defvar window (get-property vscode "window"))

(defun active-editor ()
    (get-property window "activeTextEditor"))

(defun show-text-document (doc)
    (call-sync window "showTextDocument" doc))

/**
 * vscode.workspace
 */
(defvar workspace (get-property vscode "workspace"))

(defun open-text-document (uri)
    (call-haxe workspace "openTextDocument" [uri]))

(defun workspace-folder-paths ()
    (for folder (get-property workspace "workspaceFolders")
        (get-property (get-property folder "uri") "fsPath")))

/**
 * Selection
 */

(defun selection->range (selection)
    (make-range (start selection) (end selection)))

/**
 * TextEditor
 */

(defun selection (&optional editor)
    (get-property (or editor (active-editor)) "selection"))

(defun document (&optional editor)
    (get-property (or editor (active-editor)) "document"))

(defun selected-text (&optional editor)
    (get-text (selection->range (selection editor)) editor))

/**
 * Cursor movement functions
 */

(defun cursor-to-start! ()
    "Move the cursor to the start of the current document"
    (set-property (active-editor) "selection" (make-selection 0 0 0 0)))

(defun cursor-to-end! ()
    "Move the cursor to the end of the current document"
    (let (line
                (- (line-count) 1)
            char
                (length (get-property (line-at line) "text")))
        (set-property (active-editor) "selection" (make-selection line char line char))))

(defun select-all! ()
    "Select all of the current document"
    (let (line
                (- (line-count) 1)
            char
                (length (get-property (line-at line) "text")))
        (set-property (active-editor) "selection" (make-selection 0 0 line char))))

/**
 * TextDocument
 */

(defun file-name (&optional doc)
    (get-property (or doc (document)) "fileName"))

(defun is-dirty (&optional doc)
    (get-property (or doc (document)) "isDirty"))

(defun line-count (&optional doc)
    (get-property (or doc (document)) "lineCount"))

(defun line-at (line-number &optional doc)
    (call-haxe (or doc (document)) "lineAt" [line-number]))

// Argument order is flipped from a typical method structure because I imagine
// querying the active doc will be the most typical
(defun get-text (&optional range doc)
    (call-haxe (or doc (document)) "getText" [range]))

/**
 * Uri
 */

(defvar Uri (get-property vscode "Uri"))
(defun Uri:parse (value)
    (call-haxe Uri "parse" [value]))

/**
 * Emacs equivalents
 */

(defun find-file (&optional path)
    (let (path
                (or path (input-string "Filename"))
            uri
                (Uri:parse (print (if (exists path) "file:$path" "untitled:$path")))
            doc
                (open-text-document uri))
                
        (show-text-document doc)))
